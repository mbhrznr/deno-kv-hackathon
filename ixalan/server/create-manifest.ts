import { walk } from "deno/fs/walk.ts";

import type {
  ManifestMapHandlerValue,
  ManifestMapKey,
  ManifestMapPageValue,
  ManifestMapValue,
} from "ixalan/types/manifest.ts";

/** walks the `routes` directory to populate `manifest.ts`.*/
export default async function createManifest() {
  /** keep track of handlers and pages */
  let handlers = 0;
  let pages = 0;

  const imports: string[] = [
    `import * as $s0 from "ixalan/responses/static.ts";`,
  ];
  const manifestmap = new Map<ManifestMapKey, ManifestMapValue>([
    ["/static/*", { static: "$s0" }],
  ]);

  /** iterate over each entry */
  for await (const { name, path } of walk("routes", {
    includeFiles: true,
    includeDirs: false,
    exts: ["ts", "tsx"],
  })) {
    switch (name) {
      case "handler.ts": {
        const handler: ManifestMapHandlerValue = `$h${handlers}`;
        const route: string =
          path.replace(/routes/, "").replace(/\/handler.ts/, "") || "/";

        imports.push(`import * as ${handler} from "app/${path}";`);
        manifestmap.set(route, { ...manifestmap.get(route), handler });
        handlers++;
        break;
      }

      case "page.tsx": {
        const page: ManifestMapPageValue = `$p${pages}`;
        const route: string =
          path.replace(/routes/, "").replace(/\/page.tsx/, "") || "/";

        imports.push(`import * as ${page} from "app/${path}";`);
        manifestmap.set(route, { ...manifestmap.get(route), page });
        pages++;
        break;
      }

      default:
        break;
    }
  }

  const manifest: string = [
    `/** autogenerated. shouldn't be edited, but part of version control! */`,
    ``,
    imports.join(`\n`),
    ``,
    `const manifest = {`,
    ...Array.from(manifestmap.entries()).map(
      ([key, value]) =>
        `  "${key}": ${JSON.stringify(value)
          .replace(/"/g, "")
          .replace(/\:/g, ": ")
          .replace(/{/g, "{ ")
          .replace(/}/g, " }")},`
    ),
    `} as const;`,
    ``,
    `export default manifest;`,
    `export type Manifest = typeof manifest;`,
    ``,
  ].join("\n");

  if (manifest !== (await Deno.readTextFile("./server/manifest.ts"))) {
    await Deno.writeFile(
      "./server/manifest.ts",
      new TextEncoder().encode(manifest)
    );
  }

  return (await import("app/server/manifest.ts")).default;
}
